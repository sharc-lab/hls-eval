#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <stdint.h>
#include "../include/ascon_permutation.h"
#include "../include/hex_utils.h"

#define KEY_SIZE 16
#define NONCE_SIZE 16
#define TAG_SIZE 16
#define BLOCK_SIZE 8
#define STATE_SIZE 40

#define S(i) (data->state[i])

typedef struct
{
    uint64_t key[2];
    uint64_t nonce[2];
    uint8_t *message;
    uint32_t message_len;
    uint8_t *associated_data;
    uint32_t adlen;
    uint64_t state[5];
} Ascon_data;

void get_block_padded(uint8_t *output, uint8_t *data, uint32_t data_len, uint32_t index);
void init_data(Ascon_data *data, uint8_t *message, uint32_t message_len, uint8_t *associated_data, uint32_t adlen, uint8_t *key, uint8_t *nonce);
void initialize_state(Ascon_data *data);
void process_associated_data(Ascon_data *data);
void process_plain_text(uint8_t *cipher_text, Ascon_data *data);
void load_bytes_output_reversed(uint8_t* output, uint8_t output_offset, uint8_t* input, uint8_t count);
void finalize(uint8_t *tag, Ascon_data *data);
void load_bytes_input_reversed(uint8_t *output, uint8_t *input, uint8_t count);
void process_cipher_text(uint8_t *plain_text, Ascon_data *data);